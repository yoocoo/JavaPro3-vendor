<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wj.dao.UserDao">
    <!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离  注意:使用mapper代理方法开发，namespace有特殊重要的作用 -->
    <resultMap id="UserMapperMap" type="cn.wj.domain.User">
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="next_url" property="nextUrl" jdbcType="VARCHAR"/>
        <result column="account_name" property="accountName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="role_id" property="roleId" jdbcType="INTEGER"/>
        <result column="factory_id" property="factoryId" jdbcType="INTEGER"/>
        <result column="agency_id" property="agencyId" jdbcType="INTEGER"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="last_login_time" property="lastLoginTime" jdbcType="DATE"/>
        <result column="fix_phone" property="fixPhone" jdbcType="VARCHAR"/>
        <result column="mobile_phone" property="mobilePhone" jdbcType="VARCHAR"/>
        <result column="QQ" property="qq" jdbcType="VARCHAR"/>
        <result column="postcode" property="postcode" jdbcType="VARCHAR"/>
        <result column="idcard" property="idcard" jdbcType="VARCHAR"/>
        <result column="login_count" property="loginCount" jdbcType="INTEGER"/>
        <result column="post_adress" property="postAdress" jdbcType="VARCHAR"/>
        <result column="creat_time" property="creatTime" jdbcType="DATE"/>
        <result column="head_image" property="headImage" jdbcType="VARCHAR"/>
        <result column="approved" property="approved" jdbcType="TINYINT"/>
    </resultMap>

    <resultMap id="MenuMap" type="cn.wj.domain.Menu">
        <id column="menu_id" property="menuId" jdbcType="INTEGER"/>
        <result column="menu_name" property="menuName" jdbcType="VARCHAR"/>
        <result column="menu_url" property="menuUrl" jdbcType="VARCHAR"/>
        <result column="parent_id" property="parentId" jdbcType="INTEGER"/>
        <result column="menu_order" property="menuOrder" jdbcType="VARCHAR"/>
        <result column="menu_icon" property="menuIcon" jdbcType="VARCHAR"/>
        <result column="menu_type" property="menuType" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="AgencyResultMap" type="cn.wj.domain.Agency">
        <result column="agency_id" property="agencyId" jdbcType="INTEGER"/>
        <result column="agency_name" property="agencyName" jdbcType="VARCHAR"/>
        <result column="account_name" property="accountName" jdbcType="VARCHAR"/>
    </resultMap>


    <!-- 知识点：在映射文件中配置很多sql语句 -->
    <!-- 通过select执行数据库查询，
            1.id:标示映射文件中的sql，成为Statement的id
            2.将sql语句封装到mappedStatement对象中，所以将id称为statement的id,
            3.parameterType:指定输入参数的类型，
            4.#{}标示一个占位符,
            5.#{id}其中id表示接收输入参数的名称，如果输入参数是简单类型，那么#{}中的值可以任意(如value)。
            6.resultType：指定sql输出结果的映射的java对象类型，
            7.select指定resultType表示将单条记录映射成java对象-->
    <!--1.1查找-登录用户，查找用户是否存在-->
    <select id="findOneById" resultMap="UserMapperMap" parameterType="String">
        SELECT *
        FROM user
        WHERE account_name = #{accountNname}
    </select>
    <!--1.1查找-登录用户的所有信息-->
    <select id="findUserInfo" resultMap="UserMapperMap" parameterType="String">
         SELECT  *
     FROM  user
     WHERE  account_name = #{accountNname}
    </select>
    <!--2.1增加语句-注册新用户 在数据库中，主键id设置为自增长，时间无默认值，sql语句中CURRENT_TIMESTAMP就是获取当前系统时间-->
    <insert id="add" parameterType="cn.wj.domain.User">
        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            SELECT @@IDENTITY AS user_id
        </selectKey>
        INSERT into user(next_url,account_name,password,real_name,role_id,factory_id,agency_id,
        nick_name,email,last_login_time,fix_phone,mobile_phone,QQ,postcode,idcard,
        login_count,post_adress,creat_time,head_image,approved)
        VALUES ('url', #{accountName},#{password},'null',11,0,0,'null','null',
        CURRENT_TIMESTAMP,'0',#{mobilePhone},'0','0','0',0,'null',CURRENT_TIMESTAMP,'/static/images/avatar-0.jpg',1)
    </insert>
    <!--2.2.1增加语句-注册管理用户 在数据库中，主键id设置为自增长，时间无默认值，sql语句中CURRENT_TIMESTAMP就是获取当前系统时间-->
    <insert id="sysuseradd" parameterType="cn.wj.domain.User">
        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            SELECT @@IDENTITY AS user_id
        </selectKey>
        INSERT into user(next_url,account_name,password,real_name,role_id,factory_id,agency_id,
        nick_name,email,last_login_time,fix_phone,mobile_phone,QQ,postcode,idcard,
        login_count,post_adress,creat_time,head_image,approved)
        VALUES ('url', #{accountName},#{password},#{realName},#{roleId},0,0,'null',#{email},
        CURRENT_TIMESTAMP,'0',#{mobilePhone},#{qq},#{postcode},#{idcard},0,#{postAdress},CURRENT_TIMESTAMP,'/static/images/avatar-0.jpg',1)
    </insert>
    <!--2.2.2增加语句-注入agency_id 到user表中    注意： 是全部的把一个表某个字段内容复制到另一张表的某个字段。-->
    <update id="updateAgencyId" parameterType="User">
        UPDATE  user u    LEFT JOIN  agency a
         ON u.account_name = a.account_name
        SET  u.agency_id = a.agency_id
    </update>
    <!--2.2.3增加语句-注入factory_id 到user表中    注意： 是全部的把一个表某个字段内容复制到另一张表的某个字段。-->
    <update id="updateFactoryId" parameterType="User">
        UPDATE  user u    LEFT JOIN  factory f
        ON u.account_name = f.account_name
        SET  u.factory_id = f.factory_id
    </update>

    <!--2.3.1 系统管理员注册一级管理用户（生产商）动态创建表格 -->


    <update id="createOrderTable" parameterType="String">
            create table ${tableName} (
            order_id  int(50) NOT  NULL  AUTO_INCREMENT,
            sale_id INT(50) NOT NULL COMMENT '支付id',
            vendor_id INT(200) NOT NULL COMMENT '售货机ID',
            cube_partner_id VARCHAR(50) NOT NULL COMMENT '第三方身份id' COLLATE 'utf8_unicode_ci',
            price INT(10) NOT NULL COMMENT '商品价格吧',
            creat_time DATETIME NOT NULL COMMENT '创建时间',
            paid_time DATETIME NOT NULL COMMENT '支付时间',
            paid_money INT(50) NOT NULL COMMENT '支付金额',
            paid_source VARCHAR(50) NOT NULL COMMENT '支付来源（微信或支付宝）' COLLATE 'utf8_unicode_ci',
            status VARCHAR(50) NOT NULL COMMENT '支付状态' COLLATE 'utf8_unicode_ci',
            pay_url VARCHAR(50) NOT NULL COMMENT '支付二维码' COLLATE 'utf8_unicode_ci',
            discount DOUBLE NOT NULL COMMENT '支付优惠',
            refound INT(50) NOT NULL COMMENT '退款',
            cube_creat_result TINYINT(2) NOT NULL COMMENT '是否创建第三方？？？？',
            channel INT(10) NOT NULL COMMENT '货道数量',
            primary key (order_id)
            )
        </update>


    <!--3删除-->
    <update id="del" parameterType="User">
    UPDATE  user
    SET approved =False
    WHERE  account_name = #{accountName}
  </update>

    <!--4更新用户信息-修改个人资料- 依据用户登录的账户名，来修改个人资料
     分析:
    1.需要传入用户的accountName，需要传入用户的更新信息.2.parameterType指定user对象，包括accountName和更新信息(注意:accountName必须存在)
    #{accountName}:从输入user对象中获取accountName属性值-->
    <update id="update" parameterType="cn.wj.domain.User">
    UPDATE user
    SET
    password=#{password},
    real_name = #{realName},
    email = #{email},
    mobile_phone = #{mobilePhone},
    QQ = #{qq},
    postcode = #{postcode},
    idcard = #{idcard},
    post_adress = #{postAdress}
   WHERE  account_name = #{accountName}
    </update>

    <!--5查找-该登录用户的头像-->
    <select id="findPathById" resultType="string" parameterType="String">
        SELECT  head_image
        FROM  user
        WHERE  account_name = #{accountNname}
    </select>
    <!--5更新用户信息-修改个人头像 -->
    <update id="updateImage" parameterType="cn.wj.domain.User">
   UPDATE  user
   SET
   head_image =#{headImage}
   WHERE  account_name = #{accountName}
    </update>
    <!--6.用户列表-->
    <select id="findAll" resultMap="UserMapperMap">
     SELECT * FROM user
</select>

    <!--7依据用户名获得菜单~~~~resultMap 元素是 MyBatis 中最重要最强大的元素。它就是让你远离 90%的需要从结果 集中取出数据的 JDBC 代码的那个东西, 而且在一些情形下允许你做一些 JDBC 不支持的事 情。 事实上, 编写相似于对复杂语句联合映射这些等同的代码, 也许可以跨过上千行的代码。 ResultMap 的设计就是简单语句不需要明确的结果映射,而很多复杂语句确实需要描述它们 的关系。
-->
    <select id="getMenuByUserId" resultMap="MenuMap">
        SELECT
        m.menu_id,m.menu_name,m.parent_id,m.menu_icon,m.menu_url,
			(select count(1) from menu s where s.parent_id!=0 and s.parent_id=m.parent_id) countChildrens
		FROM menu m
		  LEFT JOIN role_in_menu rm
		  ON m.menu_id = rm.menu_id
		  LEFT JOIN user_role r
		  ON rm.role_id = r.role_id
		  LEFT JOIN user ur
		  ON  r.role_id = ur.role_id
		  LEFT JOIN user u
		  ON ur.user_id = u.user_id
		  WHERE u.user_id = #{userId}
		  AND m.menu_id NOT IN(
			SELECT tt.menu_id
			FROM
				(SELECT m.menu_id,
					(SELECT COUNT(parent_id) FROM menu sp WHERE sp.parent_id=m.menu_id AND m.parent_id=0 ) countch
				 FROM menu m WHERE m.parent_id=0
		  		) tt
		  	where countch =0
		  )
		  ORDER BY m.menu_order
    </select>

    <select id="selectUserIdByName" parameterType="String" resultType="int">
        SELECT  user_id
        FROM  user
        WHERE account_name = #{accountName}
    </select>

    <!--<insert id="insert" parameterType="cn.wj.model.User" >-->
    <!--insert into user (user_id, account_name, password, -->
    <!--real_name, role_id, factory_id, -->
    <!--agency_id, nick_name, email, -->
    <!--last_login_time, fix_phone, mobile_phone, -->
    <!--QQ, postcode, idcard, -->
    <!--login_count, post_adress, creat_time, -->
    <!--head_image, approved)-->
    <!--values (#{userId,jdbcType=INTEGER}, #{accountName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, -->
    <!--#{realName,jdbcType=VARCHAR}, #{roleId,jdbcType=INTEGER}, #{factoryId,jdbcType=INTEGER}, -->
    <!--#{agencyId,jdbcType=INTEGER}, #{nickName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, -->
    <!--#{lastLoginTime,jdbcType=DATE}, #{fixPhone,jdbcType=VARCHAR}, #{mobilePhone,jdbcType=VARCHAR}, -->
    <!--#{qq,jdbcType=VARCHAR}, #{postcode,jdbcType=INTEGER}, #{idcard,jdbcType=VARCHAR}, -->
    <!--#{loginCount,jdbcType=INTEGER}, #{postAdress,jdbcType=VARCHAR}, #{creatTime,jdbcType=DATE}, -->
    <!--#{headImage,jdbcType=VARCHAR}, #{approved,jdbcType=TINYINT})-->
    <!--</insert>-->
    <!--<insert id="insertSelective" parameterType="cn.wj.model.User" >-->
    <!--insert into user-->
    <!--<trim prefix="(" suffix=")" suffixOverrides="," >-->
    <!--<if test="userId != null" >-->
    <!--user_id,-->
    <!--</if>-->
    <!--<if test="accountName != null" >-->
    <!--account_name,-->
    <!--</if>-->
    <!--<if test="password != null" >-->
    <!--password,-->
    <!--</if>-->
    <!--<if test="realName != null" >-->
    <!--real_name,-->
    <!--</if>-->
    <!--<if test="roleId != null" >-->
    <!--role_id,-->
    <!--</if>-->
    <!--<if test="factoryId != null" >-->
    <!--factory_id,-->
    <!--</if>-->
    <!--<if test="agencyId != null" >-->
    <!--agency_id,-->
    <!--</if>-->
    <!--<if test="nickName != null" >-->
    <!--nick_name,-->
    <!--</if>-->
    <!--<if test="email != null" >-->
    <!--email,-->
    <!--</if>-->
    <!--<if test="lastLoginTime != null" >-->
    <!--last_login_time,-->
    <!--</if>-->
    <!--<if test="fixPhone != null" >-->
    <!--fix_phone,-->
    <!--</if>-->
    <!--<if test="mobilePhone != null" >-->
    <!--mobile_phone,-->
    <!--</if>-->
    <!--<if test="qq != null" >-->
    <!--QQ,-->
    <!--</if>-->
    <!--<if test="postcode != null" >-->
    <!--postcode,-->
    <!--</if>-->
    <!--<if test="idcard != null" >-->
    <!--idcard,-->
    <!--</if>-->
    <!--<if test="loginCount != null" >-->
    <!--login_count,-->
    <!--</if>-->
    <!--<if test="postAdress != null" >-->
    <!--post_adress,-->
    <!--</if>-->
    <!--<if test="creatTime != null" >-->
    <!--creat_time,-->
    <!--</if>-->
    <!--<if test="headImage != null" >-->
    <!--head_image,-->
    <!--</if>-->
    <!--<if test="approved != null" >-->
    <!--approved,-->
    <!--</if>-->
    <!--</trim>-->
    <!--<trim prefix="values (" suffix=")" suffixOverrides="," >-->
    <!--<if test="userId != null" >-->
    <!--#{userId,jdbcType=INTEGER},-->
    <!--</if>-->
    <!--<if test="accountName != null" >-->
    <!--#{accountName,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="password != null" >-->
    <!--#{password,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="realName != null" >-->
    <!--#{realName,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="roleId != null" >-->
    <!--#{roleId,jdbcType=INTEGER},-->
    <!--</if>-->
    <!--<if test="factoryId != null" >-->
    <!--#{factoryId,jdbcType=INTEGER},-->
    <!--</if>-->
    <!--<if test="agencyId != null" >-->
    <!--#{agencyId,jdbcType=INTEGER},-->
    <!--</if>-->
    <!--<if test="nickName != null" >-->
    <!--#{nickName,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="email != null" >-->
    <!--#{email,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="lastLoginTime != null" >-->
    <!--#{lastLoginTime,jdbcType=DATE},-->
    <!--</if>-->
    <!--<if test="fixPhone != null" >-->
    <!--#{fixPhone,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="mobilePhone != null" >-->
    <!--#{mobilePhone,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="qq != null" >-->
    <!--#{qq,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="postcode != null" >-->
    <!--#{postcode,jdbcType=INTEGER},-->
    <!--</if>-->
    <!--<if test="idcard != null" >-->
    <!--#{idcard,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="loginCount != null" >-->
    <!--#{loginCount,jdbcType=INTEGER},-->
    <!--</if>-->
    <!--<if test="postAdress != null" >-->
    <!--#{postAdress,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="creatTime != null" >-->
    <!--#{creatTime,jdbcType=DATE},-->
    <!--</if>-->
    <!--<if test="headImage != null" >-->
    <!--#{headImage,jdbcType=VARCHAR},-->
    <!--</if>-->
    <!--<if test="approved != null" >-->
    <!--#{approved,jdbcType=TINYINT},-->
    <!--</if>-->
    <!--</trim>-->
    <!--</insert>-->
</mapper>