<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wj.dao.UserDao">
    <!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离  注意:使用mapper代理方法开发，namespace有特殊重要的作用 -->
    <resultMap id="UserMapperMap" type="cn.wj.domain.User">
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="next_url" property="nextUrl" jdbcType="VARCHAR"/>
        <result column="account_name" property="accountName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="role_id" property="roleId" jdbcType="INTEGER"/>
        <result column="factory_id" property="factoryId" jdbcType="INTEGER"/>
        <result column="agency_id" property="agencyId" jdbcType="INTEGER"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="last_login_time" property="lastLoginTime" jdbcType="DATE"/>
        <result column="fix_phone" property="fixPhone" jdbcType="VARCHAR"/>
        <result column="mobile_phone" property="mobilePhone" jdbcType="VARCHAR"/>
        <result column="QQ" property="qq" jdbcType="VARCHAR"/>
        <result column="postcode" property="postcode" jdbcType="VARCHAR"/>
        <result column="idcard" property="idcard" jdbcType="VARCHAR"/>
        <result column="login_count" property="loginCount" jdbcType="INTEGER"/>
        <result column="post_adress" property="postAdress" jdbcType="VARCHAR"/>
        <result column="creat_time" property="creatTime" jdbcType="DATE"/>
        <result column="head_image" property="headImage" jdbcType="VARCHAR"/>
        <result column="approved" property="approved" jdbcType="TINYINT"/>
    </resultMap>

    <resultMap id="MenuMap" type="cn.wj.domain.Menu">
        <id column="menu_id" property="menuId" jdbcType="INTEGER"/>
        <result column="menu_name" property="menuName" jdbcType="VARCHAR"/>
        <result column="menu_url" property="menuUrl" jdbcType="VARCHAR"/>
        <result column="parent_id" property="parentId" jdbcType="INTEGER"/>
        <result column="menu_order" property="menuOrder" jdbcType="VARCHAR"/>
        <result column="menu_icon" property="menuIcon" jdbcType="VARCHAR"/>
        <result column="menu_type" property="menuType" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="AgencyResultMap" type="cn.wj.domain.Agency">
        <result column="agency_id" property="agencyId" jdbcType="INTEGER"/>
        <result column="agency_name" property="agencyName" jdbcType="VARCHAR"/>
        <result column="account_name" property="accountName" jdbcType="VARCHAR"/>
    </resultMap>

    <!--================================================================================================================-->
    <!-- 知识点：在映射文件中配置很多sql语句 -->
    <!-- 通过select执行数据库查询，
            1.id:标示映射文件中的sql，成为Statement的id
            2.将sql语句封装到mappedStatement对象中，所以将id称为statement的id,
            3.parameterType:指定输入参数的类型，
            4.#{}标示一个占位符,
            5.#{id}其中id表示接收输入参数的名称，如果输入参数是简单类型，那么#{}中的值可以任意(如value)。
            6.resultType：指定sql输出结果的映射的java对象类型，
            7.select指定resultType表示将单条记录映射成java对象-->
    <!--10.2.1 用户列表 查询所有用户-->
    <select id="findAllUser" resultMap="UserMapperMap">
        SELECT * FROM user

    </select>
    <!-- order by approved asc-->
    <!--10.2.1 jquery DataTable +PageHelper  服务器端分页-->
    <select id="getAllCount" resultType="int">
        SELECT COUNT(*)
        FROM user
    </select>

    <!--1.1.1查找-登录用户，查找用户是否存在-->

    <select id="findOneById" resultMap="UserMapperMap" parameterType="String">
        SELECT *
        FROM user
        WHERE account_name = #{accountNname}
    </select>

    <!--1.1.3查找User表中 所有用户  6.12日 加入物理分页（暂时未用到）-->
    <select id="selectUserByAccountName" resultMap="UserMapperMap" parameterType="String">
        SELECT *
        FROM user
        WHERE 1 = 1
        AND account_name = #{accountNname,jdbcType=VARCHAR}
        ORDER BY user_id
    </select>
    <!--2.1 创建系统管理员 ，增加语句-注册新用户 在数据库中，主键id设置为自增长，时间无默认值，sql语句中CURRENT_TIMESTAMP就是获取当前系统时间-->
    <insert id="add" parameterType="cn.wj.domain.User">
        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            SELECT @@IDENTITY AS user_id
        </selectKey>
        INSERT into user(next_url,account_name,password,real_name,role_id,factory_id,agency_id,
        nick_name,email,last_login_time,fix_phone,mobile_phone,QQ,postcode,idcard,
        login_count,post_adress,creat_time,head_image,approved)
        VALUES ('url', #{accountName},#{password},'null',11,0,0,'null','null',
        CURRENT_TIMESTAMP,'0',#{mobilePhone},'0','0','0',0,'null',CURRENT_TIMESTAMP,'/static/images/avatar-0.jpg',0)
    </insert>
    <!--2.2.1增加语句-注册一级管理用户(生产商用户) 在数据库中，主键id设置为自增长，时间无默认值，sql语句中CURRENT_TIMESTAMP就是获取当前系统时间-->
    <insert id="sysuseradd" parameterType="cn.wj.domain.User">
        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            SELECT @@IDENTITY AS user_id
        </selectKey>
        INSERT into user(next_url,account_name,password,real_name,role_id,factory_id,
        nick_name,email,last_login_time,fix_phone,mobile_phone,QQ,postcode,idcard,
        login_count,post_adress,creat_time,head_image,approved)
        VALUES ('url', #{accountName},#{password},#{realName},#{roleId},0,'null',#{email},
        CURRENT_TIMESTAMP,'0',#{mobilePhone},#{qq},#{postcode},#{idcard},0,#{postAdress},CURRENT_TIMESTAMP,'/ssm_vendor/static/images/avatar-0.jpg',0)
    </insert>

    <!--=================================================-->
    <!--2.2.2.2.1  (暂时没有用到)增加语句-注入运营商归属的factory_id 到user表中  6.13号  。-->
    <select id="selectFactoryIdByName" parameterType="String" resultType="int">
        SELECT  factory_id
        FROM  user
        WHERE account_name = #{accountName}
    </select>
    <!--2.2.2.2.2 (暂时没有用到) 增加语句-注入运营商归属的factory_id 到user表中  6.13号  。-->
    <insert id="addAgencyToFactoryId" parameterType="cn.wj.domain.User">
    INSERT  into user(factory_id)
    VALUE (#{factoryId})
    </insert>
    <!--=================================================-->

    <!--2.2.2  第一张表 ：系统管理员注册一级管理用户（生产商）动态创建订单表表格 -->
    <update id="createOrderTable" parameterType="String">
            create table ${tableName} (
            order_id  int(50) NOT  NULL  AUTO_INCREMENT COMMENT '销售ID',
            order_code VARCHAR(100) NOT NULL DEFAULT '0' COMMENT '订单编码' COLLATE 'utf8_unicode_ci',
            sale_id INT(50) NULL DEFAULT NULL COMMENT '支付id',
            vendor_id INT(200) NULL DEFAULT NULL COMMENT '售货机ID',
            cube_partner_id VARCHAR(50) NULL DEFAULT NULL COMMENT '第三方身份id' COLLATE 'utf8_unicode_ci',
            price INT(10) NULL DEFAULT NULL COMMENT '商品价格吧',
            create_time DATETIME NULL DEFAULT NULL COMMENT '创建时间',
            paid_time DATETIME NULL DEFAULT NULL COMMENT '支付时间',
            paid_money INT(50) NULL DEFAULT NULL COMMENT '支付金额',
            paid_source VARCHAR(50) NULL DEFAULT NULL COMMENT '支付来源（微信或支付宝）' COLLATE 'utf8_unicode_ci',
            status VARCHAR(50) NULL DEFAULT NULL COMMENT '支付状态' COLLATE 'utf8_unicode_ci',
            pay_url VARCHAR(200) NULL DEFAULT NULL COMMENT '支付二维码' COLLATE 'utf8_unicode_ci',
            discount DOUBLE NULL DEFAULT NULL COMMENT '支付优惠',
            refound INT(50) NULL DEFAULT NULL COMMENT '退款',
            cube_creat_result TINYINT(2) NULL DEFAULT NULL COMMENT '是否创建第三方？？？？',
            channel INT(10) NULL DEFAULT NULL COMMENT '货道数量',
            primary key (order_id)
            )
            COMMENT=' 自动创建订单表'
        </update>
    <!--2.2.3  第二张表 ：系统管理员注册一级管理用户（生产商）动态创建销售表表格 -->
    <update id="createSaleTable" parameterType="String">
    CREATE TABLE  ${tableName} (
    sale_id INT(50) NOT NULL AUTO_INCREMENT COMMENT '销售ID',
    sale_code VARCHAR(100) NOT NULL DEFAULT '0' COMMENT '销售编码' COLLATE 'utf8_unicode_ci',
    vendor_id INT(200) NULL DEFAULT NULL COMMENT '售货机ID',
    channel_id INT(10) NULL DEFAULT NULL COMMENT '货道ID',
     agency_id INT(50) NULL DEFAULT NULL COMMENT '运营商或出租商id',
    price DECIMAL(18,2) NULL DEFAULT NULL COMMENT '销售价格',
    number INT(10) NULL DEFAULT NULL COMMENT '销售数量',
    time DATETIME NULL DEFAULT NULL COMMENT '销售时间',
    group_code VARCHAR(50) NULL DEFAULT NULL COMMENT '商品分组编码' COLLATE 'utf8_unicode_ci',
    goods_code INT(10) NULL DEFAULT NULL COMMENT '商品信息编码',
    goods_name VARCHAR(50) NULL DEFAULT NULL COMMENT '商品信息详情' COLLATE 'utf8_unicode_ci',
	sale_type INT(10) NULL DEFAULT NULL COMMENT '销售类型：1：普通现金，2：扫码云商城',
	order_id INT(100) NULL DEFAULT NULL COMMENT '订单表ID',
	success_not INT(10) NULL DEFAULT NULL COMMENT '出货成功：1代表出货成功 0 出货失败',
    PRIMARY KEY (sale_id)
    )
    COMMENT=' 自动创建销售表'
    </update>
    <!--2.2.4 第三张表 ：  系统管理员注册一级管理用户（生产商）动态创建金钱表表格 -->
    <update id="createCashTable" parameterType="String">
    CREATE TABLE  ${tableName} (
    cash_id INT(50) NOT NULL AUTO_INCREMENT COMMENT '现金表ID',
    vendor_id INT(200) NULL DEFAULT '0' COMMENT '对应售货机 唯一标识ID',
    money DECIMAL(18,3) NULL DEFAULT '0.000' COMMENT '动作，',
    time DATETIME NULL DEFAULT NULL COMMENT '执行时间',
    trans_border TINYINT(2) NULL DEFAULT '0' COMMENT '事物边界，0：开始，1：结束',
    PRIMARY KEY (cash_id)
    )
    COMMENT=' 自动创建现金表'
    </update>
    <!--2.2.5 第四张表 ：系统管理员注册一级管理用户（生产商）动态创建现金销售关联表 -->
    <update id="createCashSaleTable" parameterType="String">
    CREATE TABLE ${tableName} (
    id INT(50) NOT NULL AUTO_INCREMENT COMMENT '现金销售关联表id值',
    sale_id INT(50) NULL DEFAULT NULL COMMENT '销售id',
    cash_id INT(50) NOT NULL COMMENT '现金表id',

    PRIMARY KEY (id)
    )
    COMMENT='自动创建现金销售关联表'
    </update>

    <!--2.2.6  第五张表 ：系统管理员注册一级管理用户（生产商）动态创建  警告 表 -->
    <update id="createAlarmTable" parameterType="String">
    CREATE TABLE ${tableName}  (
    alarm_id INT(50) NOT NULL AUTO_INCREMENT COMMENT '警告表id值',
    vendor_id  INT(255)  NULL DEFAULT '0' COMMENT '指定的售货机ID',
    channel_id INT(50) NULL DEFAULT '0' COMMENT '货到ID',
    occur_time DATETIME NULL DEFAULT NULL COMMENT '发生时间',
    ack_time DATETIME NULL DEFAULT NULL COMMENT '确认时间',
    alarm_code VARCHAR(50) NULL DEFAULT '0' COMMENT '报警编码' COLLATE 'utf8_unicode_ci',
    description VARCHAR(50) NULL DEFAULT '0' COMMENT '故障描述' COLLATE 'utf8_unicode_ci',
    acked VARCHAR(50) NULL DEFAULT '0' COMMENT '是否已经确认故障' COLLATE 'utf8_unicode_ci',
    reason VARCHAR(50) NULL DEFAULT '0' COMMENT '确认的原因' COLLATE 'utf8_unicode_ci',
    ack_user VARCHAR(50) NULL DEFAULT '0' COMMENT '确认用户' COLLATE 'utf8_unicode_ci',
    event_id VARCHAR(50) NULL DEFAULT '0' COMMENT '事件ID' COLLATE 'utf8_unicode_ci',
    PRIMARY KEY (`alarm_id`)
    )
    COMMENT=' 自动创建警告表'
    </update>

    <!--2.2.7-注入运营商归属的factory_id 到user表中  6.13号增加语句-注入factory_id 到user表中    -->
    <update id="updateFactoryId" parameterType="cn.wj.domain.User">
        UPDATE user SET
        factory_id = #{factoryId}
        WHERE  account_name = #{accountName}
    </update>
    <!--=================================================-->
    <!-- 6.10 更新全部factory_id-->
    <!--<update id="updateFactoryId" parameterType="User">-->
    <!--UPDATE  user u    LEFT JOIN  factory f-->
    <!--ON u.account_name = f.account_name-->
    <!--SET  u.factory_id = f.factory_id-->
    <!--</update>  -->
    <!--==========================================-->

    <!--2.3.1  6.13 号增加语句-注册二级管理用户(运营商管理用户) 在数据库中，主键id设置为自增长，时间无默认值，sql语句中CURRENT_TIMESTAMP就是获取当前系统时间-->
    <insert id="sysuseraddYun" parameterType="cn.wj.domain.User">
        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            SELECT @@IDENTITY AS user_id
        </selectKey>
        INSERT into user(next_url,account_name,password,real_name,role_id,factory_id,agency_id,
        nick_name,email,last_login_time,fix_phone,mobile_phone,QQ,postcode,idcard,
        login_count,post_adress,creat_time,head_image,approved)
        VALUES ('url', #{accountName},#{password},#{realName},#{roleId},#{factoryId},0,'null',#{email},
        CURRENT_TIMESTAMP,'0',#{mobilePhone},#{qq},#{postcode},#{idcard},0,#{postAdress},CURRENT_TIMESTAMP,'/ssm_vendor/static/images/avatar-0.jpg',0)
    </insert>
    <!--2.3.2更新用户表中 agencyId ！增加语句-注入agency_id 到user表中    注意： 是全部的把一个表某个字段内容复制到另一张表的某个字段。-->
    <update id="updateAgencyId" parameterType="cn.wj.domain.User">
        UPDATE user SET
        agency_id = #{agencyId}
        WHERE  account_name = #{accountName}
    </update>
    <!--2.3.3  7.5 号增加语句-注册三级用户(运营商配货员，仓库员) 在数据库中，主键id设置为自增长，时间无默认值，sql语句中CURRENT_TIMESTAMP就是获取当前系统时间-->
    <insert id="sysuseraddYunPei" parameterType="cn.wj.domain.User">
        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            SELECT @@IDENTITY AS user_id
        </selectKey>
        INSERT into user(next_url,account_name,password,real_name,role_id,factory_id,agency_id,
        nick_name,email,last_login_time,fix_phone,mobile_phone,QQ,postcode,idcard,
        login_count,post_adress,creat_time,head_image,approved)
        VALUES ('url', #{accountName},#{password},#{realName},#{roleId},0,#{agencyId},'null',#{email},
        CURRENT_TIMESTAMP,'0',#{mobilePhone},#{qq},#{postcode},#{idcard},0,#{postAdress},CURRENT_TIMESTAMP,'/ssm_vendor/static/images/avatar-0.jpg',0)
    </insert>

    <!--=================================================-->
    <!-- 2.3.2更新用户表中 agencyId 6.10号 版本，依据两张表，更新全部的 agency_id-->
    <!--<update id="updateAgencyId" parameterType="cn.wj.domain.User">-->
    <!--UPDATE  user u    LEFT JOIN  agency a-->
    <!--ON u.account_name = a.account_name-->
    <!--SET  u.agency_id = a.agency_id-->
    <!--</update>-->
    <!--=================================================-->

    <!--3.1删除 （物理删除，不建议使用）-->
    <update id="del" parameterType="User">
    UPDATE  user
    SET approved =False
    WHERE  account_name = #{accountName}
  </update>

    <!--4.1 (全局普通更新) 更新用户信息-修改个人资料- 依据用户登录的账户名，来修改个人资料
     分析:
    1.需要传入用户的accountName，需要传入用户的更新信息.2.parameterType指定user对象，包括accountName和更新信息(注意:accountName必须存在)
    #{accountName}:从输入user对象中获取accountName属性值-->
    <update id="update" parameterType="cn.wj.domain.User">
    UPDATE user
    SET
    password=#{password},
    real_name = #{realName},
    email = #{email},
    mobile_phone = #{mobilePhone},
    QQ = #{qq},
    postcode = #{postcode},
    idcard = #{idcard},
    post_adress = #{postAdress}
   WHERE  account_name = #{accountName}
    </update>

    <!--5.1查找-该登录用户的头像(全局普通更新)-->
    <select id="findPathById" resultType="string" parameterType="String">
        SELECT  head_image
        FROM  user
        WHERE  account_name = #{accountNname}
    </select>
    <!--5.2更新用户信息-修改个人头像(全局普通更新) -->
    <update id="updateImage" parameterType="cn.wj.domain.User">
   UPDATE  user
   SET
   head_image =#{headImage}
   WHERE  account_name = #{accountName}
    </update>



    <!--7.1依据用户名获得菜单~~~~resultMap 元素是 MyBatis 中最重要最强大的元素。它就是让你远离 90%的需要从结果 集中取出数据的 JDBC 代码的那个东西, 而且在一些情形下允许你做一些 JDBC 不支持的事 情。 事实上, 编写相似于对复杂语句联合映射这些等同的代码, 也许可以跨过上千行的代码。 ResultMap 的设计就是简单语句不需要明确的结果映射,而很多复杂语句确实需要描述它们 的关系。
-->
    <select id="getMenuByUserId" resultMap="MenuMap">
        SELECT
        m.menu_id,m.menu_name,m.parent_id,m.menu_icon,m.menu_url,
			(select count(1) from menu s where s.parent_id!=0 and s.parent_id=m.parent_id) countChildrens
		FROM menu m
		  LEFT JOIN role_in_menu rm
		  ON m.menu_id = rm.menu_id
		  LEFT JOIN user_role r
		  ON rm.role_id = r.role_id
		  LEFT JOIN user ur
		  ON  r.role_id = ur.role_id
		  LEFT JOIN user u
		  ON ur.user_id = u.user_id
		  WHERE u.user_id = #{userId}
		  AND m.menu_id NOT IN(
			SELECT tt.menu_id
			FROM
				(SELECT m.menu_id,
					(SELECT COUNT(parent_id) FROM menu sp WHERE sp.parent_id=m.menu_id AND m.parent_id=0 ) countch
				 FROM menu m WHERE m.parent_id=0
		  		) tt
		  	where countch =0
		  )
		  ORDER BY m.menu_order
    </select>

    <!--//8.1根据用户名获得该用户的ID-->
    <select id="selectUserIdByName" parameterType="String" resultType="int">
        SELECT  user_id
        FROM  user
        WHERE account_name = #{accountName}
    </select>

    <!--9.1  6.20日 物理分页 处理数据  得到所有用户列表 -->
    <!--<select id="getAllUserList" parameterType="page" resultType="User">-->
    <!--SELECT *-->
    <!--FROM user-->
    <!--</select>-->

    <select id="getAllUserList" resultMap="UserMapperMap" parameterType="cn.wj.domain.User">
        SELECT *
        FROM user
         order by approved asc
    </select>

    <!--9.2  6.20日 物理分页 处理数据  在用户列表中，删除某个用户（操作：把user表中approve字段设置为0）
     说明:系统管理员：  冻结可疑账户
     -->
    <update id="removeUser" parameterType="cn.wj.domain.User">
        UPDATE  user
        SET
        approved =0
        WHERE  user_id = #{userId}
    </update>
    <!--9.3  7.7 日 物理分页 处理数据  在用户列表中，审核某个用户（操作：把user表中approve字段设置1）
     说明： 系统管理员： 审核 新注册用户
     -->
    <update id="passUser" parameterType="cn.wj.domain.User">
        UPDATE  user
        SET
        approved =1
        WHERE  user_id = #{userId}
    </update>

    <!--10.1.1（两条SQL 语句） 模糊匹配： 系统管理员列表=====; 按照生产商单位名称（该生产商以及该生产商所归属的所有的运营商列表）筛选-->
    <select id="getShengUserList" resultMap="UserMapperMap" parameterType="cn.wj.domain.User">
          SELECT f.factory_name, user_id, u.account_name, password,
        real_name, role_id, u.factory_id,
        u.agency_id, nick_name, email,
        last_login_time, fix_phone, mobile_phone,
        QQ, postcode, idcard,
        login_count, post_adress, creat_time,
        head_image, approved
        FROM user u
        Left join factory f
        on u.factory_id = f.factory_id
          where f.factory_name like  CONCAT('%',#{factoryName,jdbcType=VARCHAR},'%')
    </select>
    <!--'%'#{factoryName}'%'-->
    <!-- （1）原声：'%生产商%'  （2）  '%', #{text}), '%' -->
    <!--10.1.2（两条SQL 语句） 模糊匹配： 系统管理员列表=====; 按照生产商单位名称（该生产商以及该生产商所归属的所有的运营商列表）筛选-->
    <select id="getShengUserCount" resultType="int">
        SELECT COUNT(*)
        FROM user u
         Left join factory f
        on u.factory_id = f.factory_id
        where f.factory_name like CONCAT('%',#{factoryName,jdbcType=VARCHAR},'%')
    </select>
<!--====================================================================================================-->
    <!--10.1.1(暂时用不到，因为 findUser 可以得到该用户的所有的信息，不用在写SQL语句了) 7.16日  首先根据 用户登录时，得到的用户名，得到该用户的 角色id 说明： 生厂商管理员： 条件查询（一）获得 该生产商的所有的 售货机列表-->
    <!--<select id="getAllShengVname" -->
    <select id="getUserRoleId" resultType="int" parameterType="String">
        SELECT  role_id
        FROM  user
        WHERE  account_name = #{accountNname}
    </select>
</mapper>
        <!--<insert id="insert" parameterType="cn.wj.model.User" >-->
        <!--insert into user (user_id, account_name, password, -->
        <!--real_name, role_id, factory_id, -->
        <!--agency_id, nick_name, email, -->
        <!--last_login_time, fix_phone, mobile_phone, -->
        <!--QQ, postcode, idcard, -->
        <!--login_count, post_adress, creat_time, -->
        <!--head_image, approved)-->
        <!--values (#{userId,jdbcType=INTEGER}, #{accountName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, -->
        <!--#{realName,jdbcType=VARCHAR}, #{roleId,jdbcType=INTEGER}, #{factoryId,jdbcType=INTEGER}, -->
        <!--#{agencyId,jdbcType=INTEGER}, #{nickName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, -->
        <!--#{lastLoginTime,jdbcType=DATE}, #{fixPhone,jdbcType=VARCHAR}, #{mobilePhone,jdbcType=VARCHAR}, -->
        <!--#{qq,jdbcType=VARCHAR}, #{postcode,jdbcType=INTEGER}, #{idcard,jdbcType=VARCHAR}, -->
        <!--#{loginCount,jdbcType=INTEGER}, #{postAdress,jdbcType=VARCHAR}, #{creatTime,jdbcType=DATE}, -->
        <!--#{headImage,jdbcType=VARCHAR}, #{approved,jdbcType=TINYINT})-->
        <!--</insert>-->
        <!--<insert id="insertSelective" parameterType="cn.wj.model.User" >-->
        <!--insert into user-->
        <!--<trim prefix="(" suffix=")" suffixOverrides="," >-->
        <!--<if test="userId != null" >-->
        <!--user_id,-->
        <!--</if>-->
        <!--<if test="accountName != null" >-->
        <!--account_name,-->
        <!--</if>-->
        <!--<if test="password != null" >-->
        <!--password,-->
        <!--</if>-->
        <!--<if test="realName != null" >-->
        <!--real_name,-->
        <!--</if>-->
        <!--<if test="roleId != null" >-->
        <!--role_id,-->
        <!--</if>-->
        <!--<if test="factoryId != null" >-->
        <!--factory_id,-->
        <!--</if>-->
        <!--<if test="agencyId != null" >-->
        <!--agency_id,-->
        <!--</if>-->
        <!--<if test="nickName != null" >-->
        <!--nick_name,-->
        <!--</if>-->
        <!--<if test="email != null" >-->
        <!--email,-->
        <!--</if>-->
        <!--<if test="lastLoginTime != null" >-->
        <!--last_login_time,-->
        <!--</if>-->
        <!--<if test="fixPhone != null" >-->
        <!--fix_phone,-->
        <!--</if>-->
        <!--<if test="mobilePhone != null" >-->
        <!--mobile_phone,-->
        <!--</if>-->
        <!--<if test="qq != null" >-->
        <!--QQ,-->
        <!--</if>-->
        <!--<if test="postcode != null" >-->
        <!--postcode,-->
        <!--</if>-->
        <!--<if test="idcard != null" >-->
        <!--idcard,-->
        <!--</if>-->
        <!--<if test="loginCount != null" >-->
        <!--login_count,-->
        <!--</if>-->
        <!--<if test="postAdress != null" >-->
        <!--post_adress,-->
        <!--</if>-->
        <!--<if test="creatTime != null" >-->
        <!--creat_time,-->
        <!--</if>-->
        <!--<if test="headImage != null" >-->
        <!--head_image,-->
        <!--</if>-->
        <!--<if test="approved != null" >-->
        <!--approved,-->
        <!--</if>-->
        <!--</trim>-->
        <!--<trim prefix="values (" suffix=")" suffixOverrides="," >-->
        <!--<if test="userId != null" >-->
        <!--#{userId,jdbcType=INTEGER},-->
        <!--</if>-->
        <!--<if test="accountName != null" >-->
        <!--#{accountName,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="password != null" >-->
        <!--#{password,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="realName != null" >-->
        <!--#{realName,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="roleId != null" >-->
        <!--#{roleId,jdbcType=INTEGER},-->
        <!--</if>-->
        <!--<if test="factoryId != null" >-->
        <!--#{factoryId,jdbcType=INTEGER},-->
        <!--</if>-->
        <!--<if test="agencyId != null" >-->
        <!--#{agencyId,jdbcType=INTEGER},-->
        <!--</if>-->
        <!--<if test="nickName != null" >-->
        <!--#{nickName,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="email != null" >-->
        <!--#{email,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="lastLoginTime != null" >-->
        <!--#{lastLoginTime,jdbcType=DATE},-->
        <!--</if>-->
        <!--<if test="fixPhone != null" >-->
        <!--#{fixPhone,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="mobilePhone != null" >-->
        <!--#{mobilePhone,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="qq != null" >-->
        <!--#{qq,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="postcode != null" >-->
        <!--#{postcode,jdbcType=INTEGER},-->
        <!--</if>-->
        <!--<if test="idcard != null" >-->
        <!--#{idcard,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="loginCount != null" >-->
        <!--#{loginCount,jdbcType=INTEGER},-->
        <!--</if>-->
        <!--<if test="postAdress != null" >-->
        <!--#{postAdress,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="creatTime != null" >-->
        <!--#{creatTime,jdbcType=DATE},-->
        <!--</if>-->
        <!--<if test="headImage != null" >-->
        <!--#{headImage,jdbcType=VARCHAR},-->
        <!--</if>-->
        <!--<if test="approved != null" >-->
        <!--#{approved,jdbcType=TINYINT},-->
        <!--</if>-->
        <!--</trim>-->
        <!--</insert>-->
